import re
from urllib.parse import urlparse
from tld import get_tld


class PreProcess:
    def __init__(self, url):
        self.url = url

    # 'use_of_ip'
    def having_ip_address(self):
        match = re.search(
            "(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\."
            "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|"  # IPv4
            "((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)"
            "(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}", self.url)  # Ipv6
        if match:

            return 1
        else:
            return 0

    # 'abnormal_url'
    def abnormal_url(self):
        hostname = urlparse(self.url).hostname
        hostname = str(hostname)
        match = re.search(hostname, self.url)
        if match:
            return 1
        else:
            return 0

    # 'count.'
    def count_dot(self):
        count_dot = self.url.count('.')
        return count_dot

    # 'count-www'
    def count_www(self):
        return self.url.count('www')

    # 'count@' 
    def count_atrate(self):
        return self.url.count('@')

    # 'count_dir'
    def no_of_dir(self):
        urldir = urlparse(self.url).path
        return urldir.count('/')

    # 'count_embed_domian'
    def no_of_embed(self):
        urldir = urlparse(self.url).path
        return urldir.count('//')

    # 'short_url'
    def shortening_service(self):
        match = re.search('bit\.ly|goo\.gl|shorte\.st|go2l\.ink|x\.co|ow\.ly|t\.co|tinyurl|tr\.im|is\.gd|cli\.gs|'
                          'yfrog\.com|migre\.me|ff\.im|tiny\.cc|url4\.eu|twit\.ac|su\.pr|twurl\.nl|snipurl\.com|'
                          'short\.to|BudURL\.com|ping\.fm|post\.ly|Just\.as|bkite\.com|snipr\.com|fic\.kr|loopt\.us|'
                          'doiop\.com|short\.ie|kl\.am|wp\.me|rubyurl\.com|om\.ly|to\.ly|bit\.do|t\.co|lnkd\.in|'
                          'db\.tt|qr\.ae|adf\.ly|goo\.gl|bitly\.com|cur\.lv|tinyurl\.com|ow\.ly|bit\.ly|ity\.im|'
                          'q\.gs|is\.gd|po\.st|bc\.vc|twitthis\.com|u\.to|j\.mp|buzurl\.com|cutt\.us|u\.bb|yourls\.org|'
                          'x\.co|prettylinkpro\.com|scrnch\.me|filoops\.info|vzturl\.com|qr\.net|1url\.com|tweez\.me|v\.gd|'
                          'tr\.im|link\.zip\.net',
                          self.url)
        if match:
            return 1
        else:
            return 0

    # 'count-https'
    def count_https(self):
        return self.url.count('https')

    # 'sus_url'
    def suspicious_words(self):
        # Use regular expression to search for suspicious words
        match = re.search('PayPal|login|signin|bank|account|update|free|lucky|service|bonus|ebayisapi|webscr', self.url)
        if match:
            return 1
        else:
            return 0

    # 'count-digits'
    def digit_count(self):
        digits = 0
        for i in self.url:
            if i.isnumeric():
                digits = digits + 1
        return digits

    # 'count-letters'
    def letter_count(self):
        letters = 0
        for i in self.url:
            if i.isalpha():
                letters = letters + 1
        return letters

    # 'fd_length'
    def fd_length(self):
        urlpath = urlparse(self.url).path
        try:
            return len(urlpath.split('/')[1])
        except Exception:
            return 0

    # 'tld_length'
    def tld_length(self):
        tld = get_tld(self.url, fail_silently=True)
        try:
            return len(tld)  # Get the length of the TLD
        except Exception:
            return 0

    # 'count-http'
    def count_http(self):
        return self.url.count('http')

    # 'count%', 'count?', 'count-', 'count='
    def count_char(self, char):
        return self.url.count(char)

    # 'url_length'
    def url_length(self):
        return len(str(self.url))

    # 'hostname_length'
    def hostname_length(self):
        return len(urlparse(self.url).netloc)

    def perform_processing(self):
        use_of_ip = self.having_ip_address()
        abnormal_url = self.abnormal_url()
        count_d = self.count_dot()
        count_w = self.count_www()
        count_at = self.count_atrate()
        count_directory = self.no_of_dir()
        count_em_domain = self.no_of_embed()
        short_url = self.shortening_service()
        count_https = self.count_https()
        count_http = self.count_http()
        count_per = self.count_char("%")
        count_ques = self.count_char("?")
        count_hyp = self.count_char("-")
        count_equal = self.count_char("=")
        url_len = self.url_length()
        host_name = self.hostname_length()
        sus_url = self.suspicious_words()
        fd_len = self.fd_length()
        tld_len = self.tld_length()
        count_digits = self.digit_count()
        count_letters = self.letter_count()
        processed_input = [use_of_ip, abnormal_url, count_d, count_w, count_at, count_directory, count_em_domain,
                           short_url, count_https, count_http, count_per, count_ques, count_hyp, count_equal,
                           url_len, host_name, sus_url, fd_len, tld_len, count_digits, count_letters]
        return processed_input
